# Just force it
map_classes_df
# Eh, ok? ok.
map_classes_df
destroyX = function(es) {
f = es
for (col in c(1:ncol(f))){ #for each column in dataframe
if (startsWith(colnames(f)[col], "X") == TRUE)  { #if starts with 'X' ..
colnames(f)[col] <- substr(colnames(f)[col], 2, 100) #get rid of it
}
}
assign(deparse(substitute(es)), f, inherits = TRUE) #assign corrected data to original name
}
View(map_classes_df)
# Read in json class labels
json_file <- 'label_num_to_disease_map.json'
map_classes <- jsonlite::fromJSON(json_file, simplifyVector = FALSE)
# Get labels
labels <- names(map_classes)
# Make it a df
map_classes_df <- data.frame(map_classes)
View(map_classes_df)
# Destroy Xs
destroyX(map_classes_df)
View(map_classes_df)
# Transpose it
map_classes_df <- map_classes_df %>% t() %>% data.frame()
View(map_classes_df)
# Assign column name
colnames(map_classes_df) <- c('class')
View(map_classes_df)
# Make the rownames the first column
map_classes_df <- map_classes_df %>% rownames_to_column("label")
View(map_classes_df)
# Read in json class labels
json_file <- 'label_num_to_disease_map.json'
map_classes <- jsonlite::fromJSON(json_file, simplifyVector = FALSE)
library(jsonlite)
library(tidyverse)
destroyX = function(es) {
f = es
for (col in c(1:ncol(f))){ #for each column in dataframe
if (startsWith(colnames(f)[col], "X") == TRUE)  { #if starts with 'X' ..
colnames(f)[col] <- substr(colnames(f)[col], 2, 100) #get rid of it
}
}
assign(deparse(substitute(es)), f, inherits = TRUE) #assign corrected data to original name
}
# Read in json class labels
json_file <- 'label_num_to_disease_map.json'
map_classes <- jsonlite::fromJSON(json_file, simplifyVector = FALSE)
# Kind of a roundabout...
# Get labels
labels <- names(map_classes)
# Make it a df
map_classes_df <- data.frame(map_classes)
# Destroy Xs
destroyX(map_classes_df)
# Transpose it
map_classes_df <- map_classes_df %>% t() %>% data.frame()
# Assign column name
colnames(map_classes_df) <- c('class')
# Make the rownames the first column
map_classes_df <- map_classes_df %>% rownames_to_column("label")
# Eh, ok? ok.
map_classes_df
library(jsonlite)
library(tidyverse)
destroyX = function(es) {
f = es
for (col in c(1:ncol(f))){ #for each column in dataframe
if (startsWith(colnames(f)[col], "X") == TRUE)  { #if starts with 'X' ..
colnames(f)[col] <- substr(colnames(f)[col], 2, 100) #get rid of it
}
}
assign(deparse(substitute(es)), f, inherits = TRUE) #assign corrected data to original name
}
# Read in json class labels
json_file <- 'label_num_to_disease_map.json'
map_classes <- jsonlite::fromJSON(json_file, simplifyVector = FALSE)
# Kind of a roundabout...
# Make it a df
map_classes_df <- data.frame(map_classes)
# Destroy Xs
destroyX(map_classes_df)
# Transpose it
map_classes_df <- map_classes_df %>% t() %>% data.frame()
# Assign column name
colnames(map_classes_df) <- c('class')
# Make the rownames the first column
map_classes_df <- map_classes_df %>% rownames_to_column("label")
# Eh, ok? ok.
map_classes_df
library(rvest)
#Run a search query (returning html content)
search <- read_html("https://www.google.com/search?site=&tbm=isch&q=parrot")
#Grab all <img> tags, get their "src" attribute, a URL to an image
urls <- search %>% html_nodes("img") %>% html_attr("src") #Get urls of parrot pictures
#Load the first four, return as image list, display
map_il(urls[1:4],load.image) %>% plot
library(imager)
install.packages("imager")
#Run a search query (returning html content)
search <- read_html("https://www.google.com/search?site=&tbm=isch&q=parrot")
#Grab all <img> tags, get their "src" attribute, a URL to an image
urls <- search %>% html_nodes("img") %>% html_attr("src") #Get urls of parrot pictures
#Load the first four, return as image list, display
map_il(urls[1:4],load.image) %>% plot
library(imager)
#Run a search query (returning html content)
search <- read_html("https://www.google.com/search?site=&tbm=isch&q=parrot")
#Grab all <img> tags, get their "src" attribute, a URL to an image
urls <- search %>% html_nodes("img") %>% html_attr("src") #Get urls of parrot pictures
#Load the first four, return as image list, display
map_il(urls[1:4],load.image) %>% plot
#Run a search query (returning html content)
search <- read_html("https://www.google.com/search?site=&tbm=isch&q=parrot")
#Grab all <img> tags, get their "src" attribute, a URL to an image
urls <- search %>% html_nodes("img") %>% html_attr("src") #Get urls of parrot pictures
#Load the first four, return as image list, display
map_il(urls[1:4],load.image) %>% plot
View(search)
file <- system.file('extdata/parrots.png',package='imager')
parrots <- load.image(file)
#The file format is defined by the extension. Here we save as JPEG
imager::save.image(parrots,"/tmp/parrots.jpeg")
#Run a search query (returning html content)
search <- read_html("https://www.google.com/search?site=&tbm=isch&q=parrot")
#Grab all <img> tags, get their "src" attribute, a URL to an image
urls <- search %>% html_nodes("img") %>% html_attr("src") #Get urls of parrot pictures
#Load the first four, return as image list, display
map_il(urls[1:4],load.image) %>% plot
file <- system.file('extdata/parrots.png',package='imager')
#system.file gives the full path for a file that ships with a R package
#if you already have the full path to the file you want to load just run:
#im <- load.image("/somedirectory/myfile.png")
im <- load.image(file)
plot(im) #Parrots!
a
a
a
#Run a search query (returning html content)
search <- read_html("https://www.google.com/search?site=&tbm=isch&q=parrot")
#Grab all <img> tags, get their "src" attribute, a URL to an image
urls <- search %>% html_nodes("img") %>% html_attr("src") #Get urls of parrot pictures
#Load the first four, return as image list, display
map_il(urls[1:4],load.image) %>% plot
?load.image
load.image()
?mal_il
?map_il
urls
#Load the first four, return as image list, display
map_il(urls[1:4], load.image) %>% plot
#Load the first four, return as image list, display
map_il(urls[1:4], load.image)
library(rvest)
library(imager)
#Run a search query (returning html content)
search <- read_html("https://www.google.com/search?site=&tbm=isch&q=parrot")
#Grab all <img> tags, get their "src" attribute, a URL to an image
urls <- search %>% html_nodes("img") %>% html_attr("src") #Get urls of parrot pictures
#Load the first four, return as image list, display
map_il(urls[1:4], load.image) %>% plot
urls
map_il(urls[1:4], print)
map_il(urls[1:4], print)
map_il(urls[2:4], print)
#Load the first four, return as image list, display
map_il(urls[2:4], load.image) %>% plot
install.packages("sunburstR")
?sunburstR
library(sunburstR)
?sunburstR
sequences <- read.csv(
system.file("examples/visit-sequences.csv",package="sunburstR")
,header=F
,stringsAsFactors = FALSE
)
shiny::runApp()
runApp()
runApp()
sequences <- read.csv(
system.file("examples/visit-sequences.csv",package="sunburstR")
,header = FALSE
,stringsAsFactors = FALSE
)[1:100,]
sunburst(sequences)
## Not run:
# explore some of the arguments
sunburst(
sequences
,count = TRUE
)
sunburst(
sequences
# apply sort order to the legends
,legendOrder = unique(unlist(strsplit(sequences[,1],"-")))
# just provide the name in the explanation in the center
,explanation = "function(d){return d.data.name}"
)
# try with csv data from this fork
# https://gist.github.com/mkajava/7515402
# great use for new breadbrumb wrapping
sunburst(
csvdata = read.csv(
file = paste0(
"https://gist.githubusercontent.com/mkajava/",
"7515402/raw/9f80d28094dc9dfed7090f8fb3376ef1539f4fd2/",
"comment-sequences.csv"
)
,header = TRUE
,stringsAsFactors = FALSE
)
)
# try with csv data from this fork
# https://gist.github.com/rileycrane/92a2c36eb932b4f99e51/
sunburst( csvdata = read.csv(
file = paste0(
"https://gist.githubusercontent.com/rileycrane/",
"92a2c36eb932b4f99e51/raw/",
"a0212b4ca8043af47ec82369aa5f023530279aa3/visit-sequences.csv"
)
,header=FALSE
,stringsAsFactors = FALSE
))
install.packages("pipeR")
library(pipeR)
# read the csv data downloaded from the Google Fusion Table linked in the article
ngrams2 <- read.csv(
system.file(
"examples/ngrams2.csv"
,package="sunburstR"
)
, stringsAsFactors = FALSE
)
ngrams2 %>>%
# let's look at ngrams at the start of a word, so columns 1 and 3
(.[,c(1,3)]) %>>%
# split the ngrams into a sequence by splitting each letter and adding -
(
data.frame(
sequence = strsplit(.[,1],"") %>>%
lapply( function(ng){ paste0(ng,collapse = "-") } ) %>>%
unlist
,freq = .[,2]
,stringsAsFactors = FALSE
)
) %>>% sunburst
library(htmltools)
ngrams2 %>>%
(
lapply(
seq.int(3,ncol(.))
,function(letpos){
(.[,c(1,letpos)]) %>>%
# split the ngrams into a sequence by splitting each letter and adding -
(
data.frame(
sequence = strsplit(.[,1],"") %>>%
lapply( function(ng){ paste0(ng,collapse = "-") } ) %>>%
unlist
,freq = .[,2]
,stringsAsFactors = FALSE
)
) %>>%
( tags$div(style="float:left;",sunburst( ., height = 300, width = 300 )) )
}
)
) %>>%
tagList %>>%
browsable
library(treemap)
install.packages("treemap")
library(treemap)
library(sunburstR)
library(d3r)
# use example from ?treemap::treemap
data(GNI2014)
tm <- treemap(GNI2014,
index=c("continent", "iso3"),
vSize="population",
vColor="continent",
type="index")
tm_nest <- d3_nest(
tm$tm[,c("continent", "iso3", "vSize", "color")],
value_cols = c("vSize", "color")
)
sunburst(
data = tm_nest,
valueField = "vSize",
count = TRUE,
# to avoid double counting with pre-summed trees
# use sumNodes = FALSE
sumNodes = FALSE,
colors = htmlwidgets::JS("function(d){return d3.select(this).datum().data.color;}"),
withD3 = TRUE
)
# calendar sunburst example
library(sunburstR)
df <- data.frame(
date = seq.Date(
as.Date('2014-01-01'),
as.Date('2016-12-31'),
by = "days"
),
stringsAsFactors = FALSE
)
df$year = format(df$date, "%Y")
df$quarter = paste0("Q", ceiling(as.numeric(format(df$date,"%m"))/3))
df$month = format(df$date, "%b")
df$path = paste(df$year, df$quarter, df$month, sep="-")
df$count = rep(1, nrow(df))
sunburst(
data.frame(xtabs(count~path,df)),
# added a degree of difficulty by providing
# not easily sortable names
sortFunction = htmlwidgets::JS(
"
function(a,b){
abb = {
2014:-7,
2015:-6,
2016:-5,
Q1:-4,
Q2:-3,
Q3:-2,
Q4:-1,
Jan:1,
Feb:2,
Mar:3,
Apr:4,
May:5,
Jun:6,
Jul:7,
Aug:8,
Sep:9,
Oct:10,
Nov:11,
Dec:12
}
return abb[a.data.name] - abb[b.data.name];
}
"
)
)
# sorting example: place data in order of occurence
library(sunburstR)
df <- data.frame(
group = c("foo", "bar", "xyz"),
value = c(1, 3, 2)
)
sunburst(df,
# create a trivial sort function
sortFunction = htmlwidgets::JS('function(x) {return x;}'))
new_order <- c(3,2,1)
sunburst(df[new_order,],
sortFunction = htmlwidgets::JS('function(x) {return x;}'))
if(interactive()){
# The sund2b() API mirrors sunburst() with fewer arguments.
library(sunburstR)
# use a sample of the sequences csv data
sequences <- read.csv(
system.file("examples/visit-sequences.csv",package="sunburstR")
,header = FALSE
,stringsAsFactors = FALSE
)[1:200,]
# create a d2b sunburst
sund2b(sequences)
# show labels
sund2b(sequences, showLabels = TRUE)
# change the colors
# using d3.js categorical color scheme
sund2b(
sequences,
colors = htmlwidgets::JS("d3.scaleOrdinal(d3.schemeCategory20b)")
)
}
# change the colors
# using d3.js categorical color scheme
sund2b(
sequences,
colors = htmlwidgets::JS("d3.scaleOrdinal(d3.schemeCategory20b)"),
showLabels=TRUE
)
View(sequences)
# next
sund2b(
sequences,
colors = list(range = RColorBrewer::brewer.pal(9, "Set3"))
)
runApp()
runApp()
# next
if(interactive()){
library(sunburstR)
# use a sample of the sequences csv data
sequences <- read.csv(
system.file("examples/visit-sequences.csv",package="sunburstR")
,header = FALSE
,stringsAsFactors = FALSE
)[1:200,]
# disable the breadcrumb
sund2b(
sequences,
breadcrumbs = sund2bBreadcrumb(
enabled = FALSE
)
)
# change the breadcrumb content
sund2b(
sequences,
breadcrumbs = sund2bBreadcrumb(
html = htmlwidgets::JS("
function(nodedata, size, percent) {
return '<span style=\"font-weight: bold;\">' + nodedata.name + '</span>' + ' ' + size
}
")
)
)
}
# next
if(interactive()){
library(sunburstR)
# use a sample of the sequences csv data
sequences <- read.csv(
system.file("examples/visit-sequences.csv",package="sunburstR")
,header = FALSE
,stringsAsFactors = FALSE
)[1:200,]
# change the tooltip
sund2b(
sequences,
tooltip = sund2bTooltip(
html = htmlwidgets::JS("
function(nodedata, size, percent) {
return '<span style=\"font-weight: bold;\">' + nodedata.name + '</span>' + ' ' + size
}
")
)
)
}
# change the colors
# using d3.js categorical color scheme
sund2b(
sequences,
colors = htmlwidgets::JS("d3.scaleOrdinal(d3.schemeCategory20b)"),
showLabels=TRUE,
rootLabel = 'XXX'
)
# change the colors
# using d3.js categorical color scheme
sund2b(
sequences,
colors = htmlwidgets::JS("d3.scaleOrdinal(d3.schemeCategory20b)"),
showLabels=TRUE,
rootLabel = 'XXX',
valueField = "color"
)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
