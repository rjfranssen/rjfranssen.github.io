# Remove the binary columns Wilderness_Area1, Wilderness_Area2, Wilderness_Area3, Wilderness_Area4 and
# other 40 columns of soil type. These binary column span from 12 through 55 columns.
# Assign the these columns to NULL to delete them.
forest_cover <- forest_cover[ , colnames(forest_cover[,12:55,with=FALSE]):=NULL]
# Understand the difference between with=TRUE and with=FALSE by looking at the output of the cell. Run help(data.table) to know
# more about with operator and data.table
temp <- forest_cover[ , colnames(forest_cover[,1:5,with=TRUE])]
dim(temp)
temp <- forest_cover[ , colnames(forest_cover[,1:5,with=FALSE])]
(temp)
# Remove the binary columns Wilderness_Area1, Wilderness_Area2, Wilderness_Area3, Wilderness_Area4 and
# other 40 columns of soil type. These binary column span from 12 through 55 columns.
# Assign the these columns to NULL to delete them.
forest_cover <- forest_cover[ , colnames(forest_cover[,12:55,with=FALSE]):=NULL]
# Use setcolorder() function to reorder the columns in a dataset.
colOrder <- c("Id","Elevation","Aspect","Slope","HD.Hydro","VD.Hydro","HD.Road","HD.Fire","HS.9am","HS.noon","HS.3pm","Cover_Type","wildernessArea","soilType")
# Rearrange the columns of forest_cover according to above order.
setcolorder(forest_cover, colOrder)
# Shorten the names of columns for readability.
setnames(forest_cover, colOrder)
# Remove the Id column from forest_cover.
forest_cover$Id = NULL
table(forest_cover$soilType)
install.packages("randomForest")
library(randomForest)
forest_cover$Cover_Class <- factor(forest_cover$Cover_Type, levels = c("1.SpruceFir", "2.LodgepolePine", "3.PonderosaPine", "4.Cottonwood-Willow", "5.Aspen", "6.Douglas-fir", "7.Krummholz"), labels = c(1, 2, 3, 4, 5, 6, 7))
RandomForest_fit <- randomForest(Cover_Class,
method = 'class',
data = forest_cover,
importance = TRUE)
RandomForest_fit <- randomForest(Cover_Class,
method = 'class',
data = forest_cover,
importance = TRUE)
RandomForest_fit <- randomForest(Cover_Class ~ .,
method = 'class',
data = forest_cover,
importance = TRUE)
plot(RandomForest_fit)
legend("topright", colnames(RandomForest_fit$err.rate), col = 1:4, cex = 0.8, fill = 1:4)
forest_cover$Cover_Class <- NULL
importance(RandomForest_fit)
varImpPlot(RandomForest_fit)
library(dplyr)
library(ggplot2)
library(scales)
library(lubridate)
library(data.table)
library(randomForest)
library(gridExtra)
forest_cover <- read.csv("C:/Users/rober/Documents/smashatlas/psds/PSDS3200 - Stats and Math Foundations/data/Forest/forest_cover.csv", header=TRUE, sep=',')
head(forest_cover)
require(plyr) # Always load plyr package first if you have to use both plyr and dplyr. Because
# dplyr package will mask some of the functions in plyr.
require(dplyr)  #Use require as it will give an error message if the package doesn't exist
require(lubridate)
forest_cover$Cover_Type <- mapvalues(forest_cover$Cover_Type, from = c(1, 2, 3, 4, 5, 6, 7), to = c("1.SpruceFir", "2.LodgepolePine", "3.PonderosaPine", "4.Cottonwood-Willow", "5.Aspen", "6.Douglas-fir", "7.Krummholz"))
head(forest_cover, 2)
coverType_count <- forest_cover %>%
group_by(Cover_Type) %>%    # data is grouped according to labels (1,2,3,4,5,6,7) of cover type
dplyr::summarize(count = n()) %>%  # count the number of observations in each group
mutate(cover_type_ratio=count/sum(count)) # divide the counts obtained in above step to get the ratio.
# # Display the contents of the variable coverType_count
coverType_count
# plot the distribution of cover type using the dataframe "coverType_count" created above.
plot <- ggplot(coverType_count, aes(x = Cover_Type, y = count)) +
geom_bar(stat = "identity") + # plot a bar graph
scale_y_continuous() +
geom_text(data = coverType_count, aes(label = scales::comma(count), y = count + 100), size = 4) + # Display the count for each category
# at y position "count(2160)+100". This will display the value right above the bars.
# Labels as percent using paste
#geom_text(data = coverType_count, aes(label = paste0(round(cover_type_ratio*100, 1), "%"), y = count + 200), size = 4) +
# Labels as percent using scales::
geom_text(data = coverType_count, aes(label = scales::percent(round(cover_type_ratio, 3)), y = count + 200), size = 4) +
# Display the count percentage rounded to one decimal place at y position "count(2160)+200". This
# will display the ratios right above the counts printed in previous steps.
# You should convert the ratio 0.1428571 to 14.3% for printing in above step.
theme(axis.text.x = element_text(angle = 30, hjust = 1, size = 8)) + # code to adjust the indices on x-axis
# tilted. Play with the code to see what each parameter is doing.
ggtitle('Cover Type Distribution')
plot
oldnames <- c("Elevation","Aspect","Slope","Horizontal_Distance_To_Hydrology","Vertical_Distance_To_Hydrology","Horizontal_Distance_To_Roadways","Horizontal_Distance_To_Fire_Points","Hillshade_9am","Hillshade_Noon","Hillshade_3pm")
newnames <- c("Elevation","Aspect","Slope","HD.Hydro","VD.Hydro","HD.Road","HD.Fire","HS.9am","HS.noon","HS.3pm")
library(data.table)
setnames(forest_cover, oldnames, newnames)
head(forest_cover, 2)
p <- list()
for(i in 1:length(newnames)){
p[[i]] <- ggplot(data = forest_cover, aes_string(y = newnames[i], x = "Cover_Type")) +
geom_boxplot() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) # This line will keep the
# x-axis label and title of each plot empty.
}
# Arrange the plots in a grid using grid.arrange() in grid.Extra package. Arrange 2 plots in a row.
library(gridExtra)
grid.arrange(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]], p[[6]], p[[7]], p[[8]], p[[9]], p[[10]],
ncol=3) # ncol will arrange two plots in each row.
library(GGally)
corr_plot <- ggcorr(forest_cover[, 2:10], label = TRUE,
label_alpha = 0.6,
label_color = "black",
label_round = 1,
label_size = 4,
layout.exp = 0,
legend.position = "right",
legend.size = 9,
size = 3,
hjust = .5)
corr_plot
x = names(forest_cover[, 2:10])
data.frame(t(combn(x, 2)), stringsAsFactors = FALSE) %>%
rowwise() %>%
mutate(v = cor(forest_cover[, X1], forest_cover[, X2])) %>%
filter(v > 0.5 | v < -0.5  )
# For example HS.noon is correlated with HS.3pm
# So you will include HS.noon in this list
corrFeature1 <- c('HS.noon', 'HS.9am', 'HD.Hydro', 'Slope', 'Aspect', 'Aspect', 'Elevation')
# Corresponding feature HS.3pm is included in the list in the same position as one to one mapping.
corrFeature2 <- c('HS.3pm', 'HS.3pm', 'VD.Hydro', 'HS.noon', 'HS.9am', 'HS.3pm', 'HD.Road')
# scatterTemp<-sample_n(forest_cover,10000)
p <- list()
for(i in 1:length(corrFeature1)){
p[[i]] <- ggplot(forest_cover, aes_string(x=corrFeature1[i], y=corrFeature2[i])) +
geom_point(alpha=1/10)
}
# Arrange the plots in a grid using grid.arrange() in grid.Extra package. Arrange 2 plots in a row.
library(gridExtra)
grid.arrange(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]], p[[6]], p[[7]], ncol=2) # ncol=2 will arrange two plots in each row.
# Existing column names. These 4 columns have to be fused into one column called wildernessArea
oldCols <- c("Wilderness_Area1", "Wilderness_Area2", "Wilderness_Area3", "Wilderness_Area4")
# New labels that are to be assigned to each row in wildernessArea corresponding to the category
# of wilderness_Area it belongs
newLabels <- c("Rawah", "Neota","ComanchePeak", "CachePoudre")
# forest_cover is a dataframe. Convert it into a data.table to assign values using := operator.
forest_cover <- data.table(forest_cover)
is.data.table(forest_cover) # make sure forest_cover is a data.table.
for(i in 1:length(newLabels)) { # Loop for 4 times. length(newLabels) is 4.
refColumn<-oldCols[i] # Take the name in vector oldCols according to the loop count. oldCols[1]
# will give Wilderness_Area1.
refValue<-newLabels[i]  # Take the name in vector newLabels according to the loop count.
# newLabels[1] will give Rawah
forest_cover <- forest_cover[get(refColumn) == 1, wildernessArea := refValue]
}
#Recode the Lables for the "Soil_Type" to one column called soilType.
newLabels<-c('Cathedral','Vanet','Haploborolis','Ratake','Vanet1','Vanet2','Gothic','Supervisor',
'Troutville','Bullwark1','Bullwark2','Legault','Catamount1','Pachic','unspecified',
'Cryaquolis','Gateview','Rogert','Typic1','Typic2','Typic3','Leighcan1','Leighcan2',
'Leighcan3','Leighcan4','Granile','Leighcan5','Leighcan6','Como1','Como2','Leighcan7',
'Catamount2','Leighcan8','Cryorthents','Cryumbrepts','Bross','Rock','Leighcan9','Moran1',
'Moran2')
oldCols <- c("Soil_Type1","Soil_Type2","Soil_Type3","Soil_Type4","Soil_Type5","Soil_Type6","Soil_Type7","Soil_Type8",
"Soil_Type9","Soil_Type10","Soil_Type11","Soil_Type12","Soil_Type13","Soil_Type14","Soil_Type15","Soil_Type16",
"Soil_Type17","Soil_Type18","Soil_Type19","Soil_Type20","Soil_Type21","Soil_Type22","Soil_Type23","Soil_Type24",
"Soil_Type25","Soil_Type26","Soil_Type27","Soil_Type28","Soil_Type29","Soil_Type30","Soil_Type31","Soil_Type32",
"Soil_Type33","Soil_Type34","Soil_Type35","Soil_Type36","Soil_Type37","Soil_Type38","Soil_Type39","Soil_Type40")
# The following code is same as previous cell.
for(i in 1:length(newLabels)) {
refColumn <- oldCols[i]
refValue <- newLabels[i]
forest_cover <- forest_cover[get(refColumn) == 1, soilType := refValue]
}
# Remove the binary columns Wilderness_Area1, Wilderness_Area2, Wilderness_Area3, Wilderness_Area4 and
# other 40 columns of soil type. These binary column span from 12 through 55 columns.
# Assign the these columns to NULL to delete them.
forest_cover <- forest_cover[ , colnames(forest_cover[,12:55,with=FALSE]):=NULL]
# Understand the difference between with=TRUE and with=FALSE by looking at the output of the cell. Run help(data.table) to know
# more about with operator and data.table
temp <- forest_cover[ , colnames(forest_cover[,1:5,with=TRUE])]
dim(temp)
temp <- forest_cover[ , colnames(forest_cover[,1:5,with=FALSE])]
(temp)
# Remove the binary columns Wilderness_Area1, Wilderness_Area2, Wilderness_Area3, Wilderness_Area4 and
# other 40 columns of soil type. These binary column span from 12 through 55 columns.
# Assign the these columns to NULL to delete them.
forest_cover <- forest_cover[ , colnames(forest_cover[,12:55,with=FALSE]):=NULL]
# Use setcolorder() function to reorder the columns in a dataset.
colOrder <- c("Id","Elevation","Aspect","Slope","HD.Hydro","VD.Hydro","HD.Road","HD.Fire","HS.9am","HS.noon","HS.3pm","Cover_Type","wildernessArea","soilType")
# Rearrange the columns of forest_cover according to above order.
setcolorder(forest_cover, colOrder)
# Shorten the names of columns for readability.
setnames(forest_cover, colOrder)
# Remove the Id column from forest_cover.
forest_cover$Id = NULL
table(forest_cover$soilType)
# 7a
forest_cover$Cover_Class <- factor(forest_cover$Cover_Type, levels = c("1.SpruceFir", "2.LodgepolePine", "3.PonderosaPine", "4.Cottonwood-Willow", "5.Aspen", "6.Douglas-fir", "7.Krummholz"), labels = c(1, 2, 3, 4, 5, 6, 7))
RandomForest_fit <- randomForest(Cover_Class ~ .,
method = 'class',
data = forest_cover,
importance = TRUE)
plot(RandomForest_fit)
legend("topright", colnames(RandomForest_fit$err.rate), col = 1:4, cex = 0.8, fill = 1:4)
forest_cover$Cover_Class <- NULL
importance(RandomForest_fit)
varImpPlot(RandomForest_fit)
library(caTools)
set.seed(100) # set.seed() will help us to reproduce the results.
split <- sample.split(forest_cover$Cover_Type, SplitRatio = 0.7)
Forestcover_train <- subset(forest_cover, split==TRUE)
# Test data will have the rest 30% of data
Forestcover_test <- subset(forest_cover, split==FALSE)
dim(Forestcover_train)
install.packages("caTools")
library(caTools)
set.seed(100) # set.seed() will help us to reproduce the results.
split <- sample.split(forest_cover$Cover_Type, SplitRatio = 0.7)
Forestcover_train <- subset(forest_cover, split==TRUE)
# Test data will have the rest 30% of data
Forestcover_test <- subset(forest_cover, split==FALSE)
dim(Forestcover_train)
dim(Forestcover_test)
class(Forestcover_train$Cover_Type)
forest_cover$Cover_Type <- as.factor(forest_cover$Cover_Type)
forest_cover$wildernessArea <- as.factor(forest_cover$wildernessArea)
forest_cover$soilType <- as.factor(forest_cover$soilType)
class(Forestcover_train$Cover_Type)
Forestcover_train$Cover_Type <- factor(Forestcover_train$Cover_Type,
levels = c("1.SpruceFir","2.LodgepolePine","3.PonderosaPine","4.Cottonwood-Willow","5.Aspen","6.Douglas-fir","7.Krummholz"),
labels = c(1,2,3,4,5,6,7))
Forestcover_test$Cover_Type <- factor(Forestcover_test$Cover_Type,
levels = c("1.SpruceFir","2.LodgepolePine","3.PonderosaPine","4.Cottonwood-Willow","5.Aspen","6.Douglas-fir","7.Krummholz"),
labels = c(1,2,3,4,5,6,7))
Forestcover_train$soilType <- factor(Forestcover_train$soilType,
levels = c('Cathedral','Vanet','Haploborolis','Ratake','Vanet1','Vanet2','Gothic','Supervisor',
'Troutville','Bullwark1','Bullwark2','Legault','Catamount1','Pachic','unspecified',
'Cryaquolis','Gateview','Rogert','Typic1','Typic2','Typic3','Leighcan1','Leighcan2',
'Leighcan3','Leighcan4','Granile','Leighcan5','Leighcan6','Como1','Como2','Leighcan7',
'Catamount2','Leighcan8','Cryorthents','Cryumbrepts','Bross','Rock','Leighcan9','Moran1',
'Moran2'),
labels = c(1:40))
Forestcover_test$soilType <- factor(Forestcover_test$soilType,
levels = c('Cathedral','Vanet','Haploborolis','Ratake','Vanet1','Vanet2','Gothic','Supervisor',
'Troutville','Bullwark1','Bullwark2','Legault','Catamount1','Pachic','unspecified',
'Cryaquolis','Gateview','Rogert','Typic1','Typic2','Typic3','Leighcan1','Leighcan2',
'Leighcan3','Leighcan4','Granile','Leighcan5','Leighcan6','Como1','Como2','Leighcan7',
'Catamount2','Leighcan8','Cryorthents','Cryumbrepts','Bross','Rock','Leighcan9','Moran1',
'Moran2'),
labels = c(1:40))
anovaFire <- aov(HD.Fire ~ wildernessArea, data = forest_cover)
#wildernessArea ~ Elevation + HD.Hydro + HD.Road + HS.noon + HS.9am)
anovaFire
summary(anovaFire)
anovaElevation <- aov(Elevation ~ wildernessArea, data = forest_cover)
anovaElevation
summary(anovaElevation)
anovaHydro <- aov(HD.Hydro ~ wildernessArea, data = forest_cover)
anovaHydro
summary(anovaHydro)
anovaRoad <- aov(HD.Road ~ wildernessArea, data = forest_cover)
anovaRoad
summary(anovaRoad)
anovaHS9am <- aov(HS.9am ~ wildernessArea, data = forest_cover)
anovaHS9am
summary(anovaHS9am)
forest_cover$wildernessArea <- factor(x = forest_cover$wildernessArea,
levels = c('Rawah', 'Neota', 'ComanchePeak', 'CachePoudre'),
labels = c(1,2,3,4))
View(forest_cover)
forest_cover %>% table(wildernessArea, Cover_Type)
table(forest_cover$wildernessArea, forest_cover$Cover_Type)
library(MASS)
Forestcover_lda <- lda(Cover_Type ~ . -soilType, data = Forestcover_train)
summary(Forestcover_lda)
Forestcover_lda <- lda(Cover_Type ~ . -soilType, data = Forestcover_train)
summary(Forestcover_lda)
Forestcover_lda <- lda(Cover_Type ~ . - soilType - Cover_Class, data = Forestcover_train)
devtools::install_github("nstrayer/datadrivencv")
devtools::install_github("nstrayer/datadrivencv")
install.packages("rlang")
devtools::install_github("nstrayer/datadrivencv")
install.packages("digest")
devtools::install_github("nstrayer/datadrivencv")
install.packages("digest")
devtools::install_github("nstrayer/datadrivencv")
devtools::install_github("nstrayer/datadrivencv")
devtools::install_github("nstrayer/datadrivencv")
library(ps)
install.packages("ps")
devtools::install_github("nstrayer/datadrivencv")
install.packages("fs")
install.packages("fs")
install.packages("fs")
devtools::install_github("nstrayer/datadrivencv")
devtools::install_github("nstrayer/datadrivencv")
install.packages("processx")
devtools::install_github("nstrayer/datadrivencv")
rm(sales_data)
gc()
rm(al_zips)
rm(sales)
gc()
knitr::opts_chunk$set(
results='asis',
echo = FALSE
)
library(magrittr) # For the pipe
source("cv_printing_functions.r")
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
data_location = "https://docs.google.com/spreadsheets/d/14MQICF2F8-vf8CKPF1m4lyGKO6_thG-4aSwat1e2TWc", # strayer
#data_location = "https://docs.google.com/spreadsheets/d/1ROJdLH7aUmy_LwryqDGM7y9gf6QTrxAywrRZFDXNtMo", # franssen
pdf_mode = params$pdf_mode,
cache_data = params$cache_data
)
#CV <- readr::read_rds('cached_positions.rds')
knitr::opts_chunk$set(
results='asis',
echo = FALSE
)
library(magrittr) # For the pipe
source("cv_printing_functions.r")
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
#data_location = "https://docs.google.com/spreadsheets/d/14MQICF2F8-vf8CKPF1m4lyGKO6_thG-4aSwat1e2TWc", # strayer
data_location = "https://docs.google.com/spreadsheets/d/1ROJdLH7aUmy_LwryqDGM7y9gf6QTrxAywrRZFDXNtMo", # franssen
pdf_mode = params$pdf_mode,
cache_data = params$cache_data
)
#CV <- readr::read_rds('cached_positions.rds')
knitr::opts_chunk$set(
results='asis',
echo = FALSE
)
library(magrittr) # For the pipe
source("cv_printing_functions.r")
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
#data_location = "https://docs.google.com/spreadsheets/d/14MQICF2F8-vf8CKPF1m4lyGKO6_thG-4aSwat1e2TWc", # strayer
data_location = "https://docs.google.com/spreadsheets/d/1ROJdLH7aUmy_LwryqDGM7y9gf6QTrxAywrRZFDXNtMo", # franssen
pdf_mode = params$pdf_mode,
cache_data = params$cache_data
)
#CV <- readr::read_rds('cached_positions.rds')
knitr::opts_chunk$set(
results='asis',
echo = FALSE
)
library(magrittr) # For the pipe
source("cv_printing_functions.r")
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
#data_location = "https://docs.google.com/spreadsheets/d/14MQICF2F8-vf8CKPF1m4lyGKO6_thG-4aSwat1e2TWc", # strayer
data_location = "https://docs.google.com/spreadsheets/d/1ROJdLH7aUmy_LwryqDGM7y9gf6QTrxAywrRZFDXNtMo", # franssen
pdf_mode = params$pdf_mode,
cache_data = params$cache_data
)
knitr::opts_chunk$set(
results='asis',
echo = FALSE
)
library(magrittr) # For the pipe
source("cv_printing_functions.r")
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
#data_location = "https://docs.google.com/spreadsheets/d/14MQICF2F8-vf8CKPF1m4lyGKO6_thG-4aSwat1e2TWc", # strayer
data_location = "https://docs.google.com/spreadsheets/d/1ROJdLH7aUmy_LwryqDGM7y9gf6QTrxAywrRZFDXNtMo", # franssen
pdf_mode = params$pdf_mode,
cache_data = params$cache_data
)
#CV <- readr::read_rds('cached_positions.rds')
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
#data_location = "https://docs.google.com/spreadsheets/d/14MQICF2F8-vf8CKPF1m4lyGKO6_thG-4aSwat1e2TWc", # strayer
data_location = "https://docs.google.com/spreadsheets/d/1ROJdLH7aUmy_LwryqDGM7y9gf6QTrxAywrRZFDXNtMo", # franssen
pdf_mode = params$pdf_mode,
cache_data = params$cache_data
)
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
#data_location = "https://docs.google.com/spreadsheets/d/14MQICF2F8-vf8CKPF1m4lyGKO6_thG-4aSwat1e2TWc", # strayer
data_location = "https://docs.google.com/spreadsheets/d/1ROJdLH7aUmy_LwryqDGM7y9gf6QTrxAywrRZFDXNtMo", # franssen
pdf_mode = params$pdf_mode,
cache_data = params$cache_data
)
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
#data_location = "https://docs.google.com/spreadsheets/d/14MQICF2F8-vf8CKPF1m4lyGKO6_thG-4aSwat1e2TWc", # strayer
data_location = "https://docs.google.com/spreadsheets/d/1ROJdLH7aUmy_LwryqDGM7y9gf6QTrxAywrRZFDXNtMo", # franssen
pdf_mode = params$pdf_mode,
cache_data = params$cache_data
)
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
#data_location = "https://docs.google.com/spreadsheets/d/14MQICF2F8-vf8CKPF1m4lyGKO6_thG-4aSwat1e2TWc", # strayer
data_location = "https://docs.google.com/spreadsheets/d/1ROJdLH7aUmy_LwryqDGM7y9gf6QTrxAywrRZFDXNtMo", # franssen
pdf_mode = params$pdf_mode,
cache_data = params$cache_data
)
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
#data_location = "https://docs.google.com/spreadsheets/d/14MQICF2F8-vf8CKPF1m4lyGKO6_thG-4aSwat1e2TWc", # strayer
data_location = "https://docs.google.com/spreadsheets/d/1ROJdLH7aUmy_LwryqDGM7y9gf6QTrxAywrRZFDXNtMo", # franssen
pdf_mode = params$pdf_mode,
cache_data = params$cache_data
)
knitr::opts_chunk$set(
results='asis',
echo = FALSE
)
library(magrittr) # For the pipe
source("cv_printing_functions.r")
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
#data_location = "https://docs.google.com/spreadsheets/d/14MQICF2F8-vf8CKPF1m4lyGKO6_thG-4aSwat1e2TWc", # strayer
data_location = "https://docs.google.com/spreadsheets/d/1ROJdLH7aUmy_LwryqDGM7y9gf6QTrxAywrRZFDXNtMo", # franssen
pdf_mode = params$pdf_mode,
cache_data = params$cache_data
)
#CV <- readr::read_rds('cached_positions.rds')
# When in pdf export mode the little dots are unaligned, so fix that with some conditional CSS.
if(params$pdf_mode) {
cat("
<style>
:root{
--decorator-outer-offset-left: -6.5px;
}
</style>")
}
# Build interactive network of positions colored by section
# and connected if they occurred in the same year
# nework logo
datadrivencv::build_network_logo(CV$entries_data)
# test
#library(leaflet)
#leaflet() %>% addTiles()
View(CV)
if(params$pdf_mode){
cat("View online at _nickstrayer.me/cv/_")
} else {
cat("[<i class='fas fa-download'></i> Download as PDF](https://github.com/nstrayer/cv/raw/master/strayer_cv.pdf)")
}
if(params$pdf_mode){
cat("View online at _rjfranssen.io/cv/_")
} else {
cat("[<i class='fas fa-download'></i> Download as PDF](https://github.com/nstrayer/cv/raw/master/strayer_cv.pdf)")
}
CV %>% print_contact_info()
CV %>% print_skill_bars()
# Note the special double pipe so we modify the CV object in place
CV %<>% print_text_block("intro")
CV %<>% print_section('education')
CV %<>% print_section('industry_positions')
CV %<>% print_section('research_positions')
CV %<>% print_text_block('teaching_experience_aside')
CV %<>% print_text_block('teaching_experience_aside')
CV %<>% print_section('teaching_positions')
CV %<>% print_text_block('data_science_writing_aside')
CV %<>% print_section('data_science_writings')
CV %<>% print_section('about_me_press')
CV %<>% print_section('by_me_press')
CV %<>% print_section('academic_articles')
CV %<>% print_links()
knitr::opts_chunk$set(
results='asis',
echo = FALSE
)
library(magrittr) # For the pipe
source("cv_printing_functions.r")
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
#data_location = "https://docs.google.com/spreadsheets/d/14MQICF2F8-vf8CKPF1m4lyGKO6_thG-4aSwat1e2TWc", # strayer
data_location = "https://docs.google.com/spreadsheets/d/1ROJdLH7aUmy_LwryqDGM7y9gf6QTrxAywrRZFDXNtMo", # franssen
pdf_mode = params$pdf_mode,
cache_data = params$cache_data
)
saveRDS(CV, file = 'cached_positions.rds')
View(CV)
# This script builds both the HTML and PDF versions of your CV
# If you want to speed up rendering for googlesheets driven CVs you can cache a
# version of your data This avoids having to fetch from google sheets twice and
# will speed up rendering. It will also make things nicer if you have a
# non-public sheet and want to take care of the authentication in an interactive
# mode.
# To use, simply uncomment the following lines and run them once.
# If you need to update your data delete the "ddcv_cache.rds" file and re-run
library(tidyverse)
source("CV_printing_functions.R")
cv_data <- create_CV_object(
#data_location = "https://docs.google.com/spreadsheets/d/14MQICF2F8-vf8CKPF1m4lyGKO6_thG-4aSwat1e2TWc",
data_location = "https://docs.google.com/spreadsheets/d/1ROJdLH7aUmy_LwryqDGM7y9gf6QTrxAywrRZFDXNtMo",
cache_data = FALSE
)
readr::write_rds(cv_data, 'cached_positions.rds')
cache_data <- TRUE
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE, cache_data = cache_data),
output_file = "index.html")
# Knit the PDF version to temporary html location
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE, cache_data = cache_data),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "franssen_cv.pdf")
setwd('C:/Users/rober/Documents/smashatlas/io')
library(blogdown)
new_site(
dir = "C:/Users/rober/Documents/smashatlas/io",
install_hugo = TRUE,
format = "toml",
sample = TRUE,
theme = "hugo-toha/toha",
hostname = "github.com",
theme_example = TRUE,
empty_dirs = FALSE,
to_yaml = TRUE,
serve = interactive()
)
blogdown::build_site()
blogdown::serve_site()
